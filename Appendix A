# Appendix A: Vector-Based Astronomical Alignment Analysis

## A1.1 Astronomical Parameters and Modelling Conditions
Celestial alignments were modeled with the following conditions:
- **Target star**: Alnitak (ζ Orionis), easternmost star of Orion’s Belt
- **Epochs compared**: 2500 ± 30 BCE and 4400 ± 200 BCE
- **Event**: Vernal equinox heliacal rising
- **Local time**: 04:00
- **Location**: Giza Plateau, 29.9792°N, 31.1342°E (WGS84)
- **Corrections applied**: Precession, nutation, ΔT (via Skyfield with VSOP87; Morrison & Stephenson, 2004)
- **Altitude**: Horizon-level with terrain slope correction
- **Climate model**: Clear-sky Holocene baseline (Butzer, 1976)
- **Tolerance threshold**: ±0.5°, based on ancient surveying limits

## A1.2 S-Value Definition: Vector-Based Angular Precision
The S-value quantifies alignment precision as the 2D Euclidean distance between unit vectors derived from azimuthal orientations:

```
S = sqrt((x_p - x_s)^2 + (y_p - y_s)^2), where (x, y) = (cos θ, sin θ)
```

- θ: Azimuthal angle (°)
- (x_p, y_p): Unit vector of structure orientation
- (x_s, y_s): Unit vector of Alnitak’s rising point

The S-value, a dimensionless quantity, captures directional proximity on the unit circle, offering a robust metric for small angular discrepancies compared to raw azimuthal differences.

## A1.3 Python-Based Reproducibility Code
The following Python code reproduces all S-value calculations. Azimuths for structures were obtained from field measurements (Author et al., 2025), and Alnitak’s rising azimuths were computed using Skyfield with VSOP87 at Giza (29.9792°N, 31.1342°E).

```python
import numpy as np
import pandas as pd

def azimuth_to_unit_vector(az_deg):
    if not 0 <= az_deg <= 360:
        raise ValueError("Azimuth must be between 0 and 360 degrees")
    az_rad = np.deg2rad(az_deg)
    return np.cos(az_rad), np.sin(az_rad)

def compute_s_value(az_structure, az_star):
    x_p, y_p = azimuth_to_unit_vector(az_structure)
    x_s, y_s = azimuth_to_unit_vector(az_star)
    return np.sqrt((x_p - x_s)**2 + (y_p - y_s)**2)

data = [
    {"Structure": "Khufu", "Azimuth": 90.9},
    {"Structure": "Khafre Valley Temple", "Azimuth": 90.6},
    {"Structure": "Menkaure", "Azimuth": 91.1},
    {"Structure": "Sphinx", "Azimuth": 90.2},
    {"Structure": "Osiris Shaft", "Azimuth": 91.8},
    {"Structure": "Khentkawes Complex", "Azimuth": 91.6},
    {"Structure": "Unfinished Pyramid", "Azimuth": 91.5},
]

alnitak_az_2500 = 89.3
alnitak_az_4400 = 90.9

results = []
for entry in data:
    name = entry["Structure"]
    az = entry["Azimuth"]
    delta_az_2500 = abs(az - alnitak_az_2500)
    delta_az_4400 = abs(az - alnitak_az_4400)
    s_2500 = compute_s_value(az, alnitak_az_2500)
    s_4400 = compute_s_value(az, alnitak_az_4400)
    results.append({
        "Structure": name,
        "Structure Azimuth (°)": az,
        "Azimuth (2500 BCE)": alnitak_az_2500,
        "ΔAz (2500 BCE)": delta_az_2500,
        "S (2500 BCE)": s_2500,
        "Azimuth (4400 BCE)": alnitak_az_4400,
        "ΔAz (4400 BCE)": delta_az_4400,
        "S (4400 BCE)": s_4400
    })

df = pd.DataFrame(results)
print(df.to_string(index=False, float_format="%.5f"))
```

## A1.4 Structure-Level S-Values by Epoch

| Structure             | Azimuth (°) | Az (2500 BCE) | ΔAz 2500 | S (2500) | Az (4400 BCE) | ΔAz 4400 | S (4400) |
|-----------------------|-------------|---------------|----------|----------|----------------|-----------|-----------|
| Khufu                | 90.90000    | 89.30000      | 1.60000  | 0.02792  | 90.90000       | 0.00000   | 0.00000   |
| Khafre Valley Temple | 90.60000    | 89.30000      | 1.30000  | 0.02269  | 90.90000       | 0.30000   | 0.00524   |
| Menkaure             | 91.10000    | 89.30000      | 1.80000  | 0.03141  | 90.90000       | 0.20000   | 0.00349   |
| Sphinx               | 90.20000    | 89.30000      | 0.90000  | 0.01571  | 90.90000       | 0.70000   | 0.01222   |
| Osiris Shaft         | 91.80000    | 89.30000      | 2.50000  | 0.04363  | 90.90000       | 0.90000   | 0.01571   |
| Khentkawes Complex   | 91.60000    | 89.30000      | 2.30000  | 0.04014  | 90.90000       | 0.70000   | 0.01222   |
| Unfinished Pyramid   | 91.50000    | 89.30000      | 2.20000  | 0.03839  | 90.90000       | 0.60000   | 0.01047   |

## A1.5 Group-Level RMS S-Value Summary

```
RMS = sqrt(1/N * sum(S_i^2))
```

| Epoch            | RMS S-value |
|------------------|--------------|
| 2500 ± 30 BCE    | 0.0376       |
| 4400 ± 200 BCE   | 0.0165       |

## A1.6 Monte Carlo Validation of S-Value Significance
To test the null hypothesis of random orientation, 10,000 Monte Carlo simulations were conducted. In each run, 7 azimuths were randomly drawn from a uniform 360° distribution and their RMS S-value computed. The probability of obtaining RMS S < 0.02 by chance was **p < 0.01**.

Full code and histogram visualisation are available at: [https://github.com/paibyun9/Egypt](https://github.com/paibyun9/Egypt)

---

**References**  
Butzer, K. W. (1976). *Early Hydraulic Civilization in Egypt: A Study in Cultural Ecology.* University of Chicago Press.  
Morrison, L. V., & Stephenson, F. R. (2004). Historical values of the Earth’s clock error ΔT and the calculation of eclipses. *Journal for the History of Astronomy*, 35(3), 327–336.
