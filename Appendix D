# Appendix D. Engineering Simulation Protocol and Output Tables

This appendix documents the full simulation methodology, parameters, and numerical outputs related to the force dynamics of megalithic stone unloading on inclined versus recessed platforms. The simulation was implemented in Python 3.11, incorporating structure-specific slope constraints based on site topology and architectural reconstructions. All inputs and outputs were calibrated to reflect conditions for 50-ton granite blocks, consistent with construction materials used in the Valley Temple of Khafre.

## D.1 Python Simulation Environment

- **Language:** Python 3.11  
- **Libraries Used:** numpy, matplotlib, scipy, pandas  
- **Execution Context:** Local CPU runtime  
- **Code Availability:** Full source code archived in supplemental materials upon request  

## D.2 Input Parameters

| Parameter | Value | Notes |
|----------|-------|-------|
| Stone Mass | 50,000 kg | Representative of large granite blocks |
| Dimensions (L × W × H) | 5.0 m × 2.5 m × 2.0 m | Center of mass at midpoint (H/2) |
| Density | 2,650 kg/m³ | Typical for granite |
| Gravity (g) | 9.81 m/s² | Standard gravitational acceleration |
| Static Friction Coefficient | μ_static = 0.6 | Stone-on-platform contact surface |
| Kinetic Friction Coefficient | μ_kinetic = 0.5 | Not used in static model |
| Incline Angles Tested | 5° to 35°, step = 1° | I-shaped ramp slope range |
| Tipping Threshold | ≈ 32.0° | Calculated as: θₜ = arctan(1.25 / 2.0) |
| U-Shaped Platform Slope | 0° to 2° | Modeled as flat surface |

## D.3 Calculation Procedure

1. For each incline angle, gravitational force component along the slope was computed:  
   `F_gravity = m × g × sin(θ)`  
2. Frictional resistance was calculated:  
   `F_friction = μ_static × m × g × cos(θ)`  
3. Comparison logic:  
   - If F_gravity > F_friction: Slip Risk = "Yes"  
   - If θ ≥ tipping threshold: Tipping Risk = "Yes"  
4. Classification Logic:  
   - θ < 15°: "Stable"  
   - 15° ≤ θ < 32°: "Slip Likely"  
   - θ ≥ 32°: "Tipping Probable"  

## D.4 Output Table (Excerpt from Table 2)

| Incline (°) | Gravity Force (N) | Friction Resistance (N) | Slip Risk | Tipping Risk | Classification |
|-------------|-------------------|--------------------------|-----------|---------------|----------------|
| 5           | 42,749            | 293,180                  | No        | No            | Stable         |
| 15          | 127,000           | 284,100                  | Yes       | No            | Slip Likely    |
| 30          | 245,250           | 254,500                  | Yes       | No            | Slip Likely    |
| 32          | 260,280           | 252,300                  | Yes       | Yes           | Tipping Probable |
| 35          | 280,780           | 245,200                  | Yes       | Yes           | Tipping Probable |

⚠️ For U-shaped platforms (0°–2°), gravitational force never exceeds friction resistance. Classification: Stable across all tested cases.

## D.5 Simulation Reproducibility Notes

- All simulations were executed on flat terrain assumptions, excluding lateral constraints or dynamic motion.
- The DEM-based slope validation will be introduced in follow-up work, integrating real slope angles from the Giza Plateau.
- This model does not yet account for rolling dynamics, bouncing, or impact dampening.

## D.6 Figure and Table Reference

- **See Figure 4**: Force Dynamics on Inclined Platforms  
- **See Table 2**: Stability Classification Matrix  

## D.7 Python Code Snippet for Stability Simulation

```python
import numpy as np
import pandas as pd

mass = 50000
width = 2.5
height = 2.0
g = 9.81
mu_static = 0.6
tipping_angle = np.degrees(np.arctan((width / 2) / height))

angles = np.arange(5, 36, 1)
results = []

for theta in angles:
    theta_rad = np.radians(theta)
    gravity_force = mass * g * np.sin(theta_rad)
    friction_resistance = mu_static * mass * g * np.cos(theta_rad)
    slip = gravity_force > friction_resistance
    tip = theta >= tipping_angle

    if theta < 15:
        classification = "Stable"
    elif 15 <= theta < tipping_angle:
        classification = "Slip Likely" if slip else "Stable"
    else:
        classification = "Tipping Probable" if tip else "Slip Likely"

    results.append({
        "Incline (°)": theta,
        "Gravity (N)": round(gravity_force, 1),
        "Friction (N)": round(friction_resistance, 1),
        "Slip Risk": "Yes" if slip else "No",
        "Tipping Risk": "Yes" if tip else "No",
        "Classification": classification
    })

df = pd.DataFrame(results)
print(df)```
